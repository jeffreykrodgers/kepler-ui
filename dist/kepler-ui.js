class t extends HTMLElement{static observedAttributes=["theme"];constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.loadTheme()}attributeChangedCallback(t,e,n){"theme"===t&&e!==n&&this.loadTheme()}loadTheme(){const t="/src/styles/variables.css",e=`/src/styles/${this.getAttribute("theme")||"kepler-light"}.css`;this.shadowRoot.innerHTML=`\n        <style>\n          @import url('${t}');\n          @import url('${e}');\n\n          :host {\n            display: block;\n            background: var(--base-background);\n          }\n        </style>\n        <slot></slot>\n      `,Promise.all([this.fetchCSS(t),this.fetchCSS(e)]).then((([t,e])=>{this.applyVariablesToHost(t+e)})).catch((t=>console.error("Failed to load theme or variables CSS:",t)))}fetchCSS(t){return fetch(t).then((e=>{if(!e.ok)throw new Error(`Failed to fetch CSS from ${t}`);return e.text()}))}applyVariablesToHost(t){const e=/--([\w-]+):\s*([^;]+);/g;let n;for(;null!==(n=e.exec(t));)this.style.setProperty(`--${n[1]}`,n[2])}}customElements.define("kepler-theme",t);class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.button=document.createElement("button"),this.button.classList.add("button"),this.shadowRoot.appendChild(this.button),this.applyStyles(),this.render()}static get observedAttributes(){return["left-icon","right-icon","label"]}attributeChangedCallback(t,e,n){e!==n&&this.render()}render(){const t=this.getAttribute("left-icon")||"",e=this.getAttribute("right-icon")||"",n=this.getAttribute("label")||"Button?";this.button.innerHTML=`\n            ${t?`<img src="${t}" class="icon left-icon" alt="left icon">`:""}\n            <span class="label">${n}</span>\n            ${e?`<img src="${e}" class="icon right-icon" alt="right icon">`:""}\n        `}applyStyles(){const t=document.createElement("style");t.textContent="\n            .button {\n                display: inline-flex;\n                height: 32px;\n                padding: 8px;\n                flex-direction: column;\n                justify-content: center;\n                align-items: flex-start;\n                gap: 10px;\n                flex-shrink: 0;\n                transition: background-color var(--transition-duration, 0.1s);\n                border-radius: var(--border-small, 1px);\n                border: var(--border-medium, 2px) solid var(--base-text--, #1D1D1D);\n                background: var(--base-surface, #F1F6FA);\n                color: var(--base-text--, #1D1D1D);\n                font-family: var(--font-family, sans-serif);\n            }\n            .icon {\n                margin: 0 8px;\n            }\n            .button:hover {\n                background: var(--base-hover, #D7DBDE);\n            }\n            .button:active {\n                background: var(--neutral-9, #1D1D1D);\n                color: var(--neutral-1, #F1F6FA);\n            }\n        ",this.shadowRoot.appendChild(t)}proxyEvents(t){t.forEach((t=>{this.button.addEventListener(t,(t=>{const e=new t.constructor(t.type,t);this.dispatchEvent(e)}))}))}}customElements.define("kepler-button",e);

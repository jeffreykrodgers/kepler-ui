class t extends HTMLElement{static observedAttributes=["theme"];constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.loadTheme(),this.addEventListener("theme-change",(t=>{const{theme:n}=t.detail;n&&this.setAttribute("theme",n)}))}attributeChangedCallback(t,n,e){"theme"===t&&n!==e&&this.loadTheme()}loadTheme(){const t="/src/styles/variables.css",n=`/src/styles/${this.getAttribute("theme")||"kepler-light"}.css`;this.shadowRoot.innerHTML=`\n        <style>\n          @import url('${t}');\n          @import url('${n}');\n  \n          :host {\n            display: block;\n            background: var(--base-background);\n          }\n        </style>\n        <slot></slot>\n      `,Promise.all([this.fetchCSS(t),this.fetchCSS(n)]).then((([t,n])=>{this.applyVariablesToHost(t+n)})).catch((t=>console.error("Failed to load theme or variables CSS:",t)))}fetchCSS(t){return fetch(t).then((n=>{if(!n.ok)throw new Error(`Failed to fetch CSS from ${t}`);return n.text()}))}applyVariablesToHost(t){const n=/--([\w-]+):\s*([^;]+);/g;let e;for(;null!==(e=n.exec(t));)this.style.setProperty(`--${e[1]}`,e[2])}}customElements.define("kepler-theme",t);class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.button=document.createElement("button"),this.button.classList.add("button"),this.shadowRoot.appendChild(this.button),this.applyStyles(),this.render(),this.button.addEventListener("click",(()=>{this.handleClick()}))}static get observedAttributes(){return["left-icon","right-icon"]}attributeChangedCallback(t,n,e){n!==e&&this.render()}render(){this.button.innerHTML='\n          <span class="button-content">\n            <span class="icon left-icon"><slot name="left-icon"></slot></span>\n            <span class="label"><slot></slot></span>\n            <span class="icon right-icon"><slot name="right-icon"></slot></span>\n          </span>\n        ',this.manageSlotVisibility("left-icon",".left-icon"),this.manageSlotVisibility("right-icon",".right-icon")}manageSlotVisibility(t,n){const e=this.shadowRoot.querySelector(`slot[name="${t}"]`),s=this.shadowRoot.querySelector(n),a=()=>{const t=e.assignedNodes().length>0;s.style.display=t?"inline-flex":"none"};a(),e.addEventListener("slotchange",a)}handleClick(){const t=this.getAttribute("data-event");if(!t)return;const n={};Array.from(this.attributes).filter((t=>t.name.startsWith("data-detail-"))).forEach((t=>{const e=t.name.replace("data-detail-","");n[e]=t.value})),this.dispatchEvent(new CustomEvent(t,{detail:n,bubbles:!0,composed:!0}))}applyStyles(){const t=document.createElement("style");t.textContent="\n            .button {\n                box-sizing: border-box;\n                display: inline-flex;\n                min-height: 40px;\n                padding: var(--spacing-small, 8px) var(--spacing-medium, 16px);\n                justify-content: flex-start;\n                align-items: center;\n                position: relative; /* Ensure the pattern stays behind content */\n                overflow: hidden; /* Clip the pattern to the button's border */\n                transition: background-color var(--transition-duration, 0.1s);\n                border-radius: var(--border-small, 1px);\n                border: var(--border-medium, 2px) solid var(--base-text--, #1D1D1D);\n                background: var(--base-surface, #F1F6FA);\n            }\n\n            /* Diagonal line pattern */\n            .button::before {\n                content: '';\n                position: absolute;\n                top: 0;\n                left: 0;\n                width: 200%; /* Ensure the pattern covers large buttons */\n                height: 200%; /* Ensure the pattern covers large buttons */\n                background: repeating-linear-gradient(\n                -45deg, \n                var(--base-text--, #1D1D1D) 0, \n                var(--base-text--, #1D1D1D) 2px, \n                transparent 3px, \n                transparent 10px\n                );\n                opacity: 1; /* Adjust visibility */\n                z-index: 0; /* Ensure it sits behind content */\n            }\n                \n            .button-content {\n                display: inline-flex;\n                flex-direction: row;\n                min-height: 24px;\n                align-items: center;\n                padding: 0 var(--spacing-small);\n                gap: var(--spacing-medium, 8px);\n                position: relative; /* Ensure it sits above the pattern */\n                z-index: 1; /* Stack above the background */\n                transition: background-color var(--transition-duration, 0.1s);\n                background: var(--base-surface); /* Ensure no background hides the pattern */\n                color: var(--base-text--, #1D1D1D);\n                font-family: Tomorrow;\n                font-size: 16px;\n                font-weight: 500;\n                text-transform: uppercase;\n            }\n      \n            .icon {\n                display: flex;\n            }\n        \n            .button:hover,\n            .button:hover > .button-content {\n                background: var(--base-hover);\n            }\n        \n            .button:active,\n            .button:active > .button-content {\n                background: var(--base-text--);\n                color: var(--base-background);\n            }\n        \n            .label {\n                padding-bottom: var(--spacing-x-small, 4px);\n            }\n        ",this.shadowRoot.appendChild(t)}}customElements.define("kepler-button",n);
